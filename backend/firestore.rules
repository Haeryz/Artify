rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }
    
    // User documents - users can only read/write their own data
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Prevent modification of critical security fields by users
      allow update: if request.auth != null && 
                     request.auth.uid == userId && 
                     (!request.resource.data.diff(resource.data).affectedKeys()
                        .hasAny(['securityInfo.accountCreationIp', 'securityInfo.accountCreationUserAgent']));
    }
    
    // Sessions - users can only access their own sessions
    match /sessions/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false; // Only server can write sessions
    }
    
    // Prompt data - users can access only their own prompts
    match /prompts/{promptId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Login attempts - only server can access
    match /login_attempts/{docId} {
      allow read, write: if false;
    }
    
    // IP blocklist - only server can access
    match /ip_blocklist/{docId} {
      allow read, write: if false;
    }
  }
}
